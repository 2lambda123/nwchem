--- ga-5.8.1/global/src/scalapack.F.org	2021-10-13 14:48:46.771901369 -0700
+++ ga-5.8.1/global/src/scalapack.F	2021-10-13 14:48:53.767937447 -0700
@@ -6,6 +6,7 @@
 #else
 #define INTGR4 integer*4
 #endif
+#define DEBUG 1      
 C     $Id: scalapack.F,v 1.11 2006/10/13 16:15:17 d3g293 Exp $
 ****************************************************************************
 * GA to/from ScaLAPACK (square block scattered decomposition) interface    * 
@@ -98,6 +99,10 @@
 c     determine optimal nprocs for eigensolvers based on matrix size n
 c
       maxproc=slgetmxproc(n,nnodes)
+      if(ga_nodeid().eq.0) then
+         write(6,*) ' using maxproc ',maxproc,' out of ',nnodes
+         call flush(6)
+      endif
       call FindGrid(maxproc, nprow2, npcol2)
 c
 #if 0
@@ -204,6 +209,10 @@
       nnodes=ga_nnodes()
 #endif
       maxproc=slgetmxproc(n,nnodes)
+      if(ga_nodeid().eq.0) then
+         write(6,*) ' using maxproc ',maxproc,' out of ',nnodes
+         call flush(6)
+      endif
 #if 0
       call sl_init(icontxt, nprow, npcol)
 #else
@@ -230,10 +239,13 @@
       INTGR4 nmax,nprocs,twoi
       double precision nprocs0
       double precision otto
-      parameter(nmax=19,fact=((7108d0*7108d0)/1024d0),otto=8d0)
-cnew      parameter(nmax=11,fact=((7108d0*7108d0)/512d0),otto=8d0)
+cold      parameter(nmax=19,fact=((7108d0*7108d0)/1024d0),otto=8d0)
+c0      parameter(nmax=11,fact=((7108d0*7108d0)/512d0),otto=8d0)
+      parameter(nmax=11,fact=((7108d0*7108d0)/256d0),otto=8d0)
+c2      parameter(nmax=11,fact=((7108d0*7108d0)/512d0),otto=8d0)
 c     lower bound of 8 procs
       nprocs0=max((n*n)/fact,otto)
+#if 1      
 c
 c     try to get powers of two
 c
@@ -241,7 +253,11 @@
          if(nint(nprocs0/(2d0**i)).ge.1) goto 1
       enddo
       i=4
-1     twoi=2**i
+ 1    twoi=2**i
+#else
+c     make it a submultiple of nnodes
+      twoi=nnodes/ceiling(dble(nnodes)/dble(nprocs0))
+#endif      
       slgetmxproc=min(nnodes,twoi)
       return
       end
@@ -2052,6 +2068,7 @@
       logical use_direct
 
       external pdlamch
+      
       integer i,j
 
 c     
@@ -2068,7 +2085,8 @@
       me     = ga_nodeid()
 c     
 c***  check GA info for input arrays
-c     
+c
+
       call ga_check_handle(g_a, 'ga_pdsyev: a')
       call ga_check_handle(g_b, 'ga_pdsyev: b')
 c     
@@ -2271,6 +2289,7 @@
       else
         call SLexit2
       endif
+
       return
       end
 c******************************************************************
@@ -3030,7 +3049,7 @@
       INTGR4 liwork4,lcwork4
 c
       INTGR4 nn,nq, np,trilwmin,iarow,iacol
-      INTGR4 n
+      INTGR4 n,n1
       INTGR4 info,one4,zero4,two4
       parameter(zero4=0,one4=1,two4=2)
       integer info8,dblsize
@@ -3045,6 +3064,10 @@
       logical use_direct
 
       external pdlamch,iceil,indxg2p
+#ifdef DEBUG      
+      external MPI_Wtime
+      double precision MPI_Wtime,t0,t1
+#endif      
 c     
 c     processor dependent; machine dependent
 c     
@@ -3060,6 +3083,11 @@
 c     
 c***  check GA info for input arrays
 c     
+#ifdef DEBUG      
+      if(ga_nodeid().eq.0) then
+         t0=MPI_Wtime()
+      endif
+#endif
       call ga_check_handle(g_a, 'ga_pdsyevd: a')
       call ga_check_handle(g_b, 'ga_pdsyevd: b')
 c     
@@ -3242,11 +3270,28 @@
 c     
 c     
       lcwork4=lcwork
+#ifdef DEBUG
+      if(ga_nodeid().eq.0) then
+         t1=MPI_Wtime()
+         write(6,123) '1 pdsyevd in ',t1-t0,' s'
+ 123     format(a,f10.2,a)
+         t0=t1
+         call flush(6)
+      endif
+#endif      
       call pdsyevd(jobz, uplo,
      1     n, dbl_mb(adrA), one4, one4, descA,
      1     eval, dbl_mb(adrB), one4, one4, 
      2     descB, dbl_mb(adrcwork), lcwork4,
      2     int_mb(adriwork), liwork4, info)
+#ifdef DEBUG
+      if(ga_nodeid().eq.0) then
+         t1=MPI_Wtime()
+         write(6,123) '2 pdsyevd in ',t1-t0,' s'
+         t0=t1
+         call flush(6)
+      endif
+#endif      
 c     
       if ( info .ne. 0 ) then
          if ( info .gt. 0 ) then
@@ -3295,6 +3340,14 @@
          dblsize=ma_sizeof(MT_DBL,1,MT_BYTE)*dima1
          call ga_brdcst(1688,eval,dblsize,0)
       endif
+#ifdef DEBUG
+      if(ga_nodeid().eq.0) then
+         t1=MPI_Wtime()
+         write(6,123) '3 pdsyevd in ',t1-t0,' s'
+         t0=t1
+         call flush(6)
+      endif
+#endif      
       return
       end
 #if HAVE_PDSYEVR
@@ -3360,6 +3413,10 @@
       double precision pdlamch,dumm
       INTGR4 dumm2
       external pdlamch
+#ifdef DEBUG      
+      external MPI_Wtime
+      double precision MPI_Wtime,t0,t1
+#endif      
       INTGR4 iceil
 c     
 c     processor dependent; machine dependent
@@ -3394,7 +3451,11 @@
      %     'ga_pdsyevr: size matrix B and B differ ',0)
       
       if(mout.le.0.or.mout.gt.n) mout=n
-
+#ifdef DEBUG      
+      if(ga_nodeid().eq.0) then
+         t0=MPI_Wtime()
+      endif
+#endif
 c     
 c     
 c***  initialize SL interface
@@ -3517,16 +3578,38 @@
 c     
          liwork4=liwork
          lcwork4=lcwork
-
+#ifdef DEBUG
+      if(ga_nodeid().eq.0) then
+         t1=MPI_Wtime()
+         write(6,123) '1 pdsyevr in ',t1-t0,' s'
+ 123     format(a,f10.2,a)
+         t0=t1
+         call flush(6)
+      endif
+#endif      
          call pdsyevr(jobz, range, uplo,
      1        n, dbl_mb(adrA), one4, one4, descA,vl, 
      2        vu, il, iu, m, nz, eval,  dbl_mb(adrB), one4, 
      3        one4, descB, dbl_mb(adrcwork), lcwork4,
      3        int_mb(adriwork), liwork4, info)
-c     
+#ifdef DEBUG
+         if(ga_nodeid().eq.0) then
+         t1=MPI_Wtime()
+         write(6,123) '2 pdsyevr in ',t1-t0,' s'
+         t0=t1
+         call flush(6)
+      endif
+#endif      
+c
+      if(mout.ne.m) then
+         if(iam.eq.0) 
+     W        write(6,*) ' eval  search failed: got',m,
+     W        ' instead of ',m
+         info=-999
+      endif
          mout=m
          if(iam.eq.0.and.mout.ne.n) 
-     W        write(0,*) ' computed eval ',mout,' out of ',
+     W        write(6,*) ' computed eval ',mout,' out of ',
      A        dima1
 
 
@@ -3574,7 +3657,14 @@
          dblsize=ma_sizeof(MT_DBL,1,MT_BYTE)*dima1
          call ga_brdcst(1688,eval,dblsize,0)
       endif
-      
+#ifdef DEBUG
+      if(ga_nodeid().eq.0) then
+         t1=MPI_Wtime()
+         write(6,123) '3 pdsyevr in ',t1-t0,' s'
+         t0=t1
+         call flush(6)
+      endif
+#endif      
       return
       end
 #endif
@@ -3662,6 +3752,12 @@
       parameter(one4=1,zero4=0,two4=4,four4=4)
       integer info8,dblsize
       integer*4 n4
+#ifdef DEBUG
+      double precision t0,t1
+      if(ga_nodeid().eq.0) then
+         t0=MPI_Wtime()
+      endif
+#endif      
 c     
 c     processor dependent; machine dependent
 c     
@@ -3868,8 +3964,15 @@
            if(elpa_err.ne.0) call ga_error(
      A     'ga-evp_real: get_elpa_row_col failed ',elpa_err)
 #endif
-
- 
+#ifdef DEBUG
+           if(ga_nodeid().eq.0) then
+              t1=MPI_Wtime()
+              write(6,123) '1 evp_real in ',t1-t0,' s'
+ 123     format(a,f10.2,a)
+              t0=t1
+              call flush(6)
+           endif
+#endif 
 #if HAVE_ELPA_2017
 #if USE_ALLOCATE
          call e%eigenvectors(a, ev, b, elpa_err)
@@ -3899,7 +4002,14 @@
 #endif
 #endif
      E   call ga_error(' solve_evp_real failed',0)
-
+#ifdef DEBUG
+         if(ga_nodeid().eq.0) then
+            t1=MPI_Wtime()
+            write(6,123) '2 evp_real in ',t1-t0,' s'
+            t0=t1
+            call flush(6)
+         endif
+#endif
          if(iam.eq.0.and.mout4.ne.n) 
      W        write(6,*) ' computed eval ',mout,' out of ',
      A        dima1
@@ -3968,7 +4078,14 @@
          dblsize=ma_sizeof(MT_DBL,1,MT_BYTE)*dima1
          call ga_brdcst(1688,eval,dblsize,0)
       endif
-      
+#ifdef DEBUG
+      if(ga_nodeid().eq.0) then
+         t1=MPI_Wtime()
+         write(6,123) '3 evp_real in ',t1-t0,' s'
+         t0=t1
+         call flush(6)
+      endif
+#endif      
       return
       end
 #if HAVE_ELPA_2017
